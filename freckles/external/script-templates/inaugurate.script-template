#!/usr/bin/env bash

#
#
#
#      _                                         _
#     (_)                                       | |
#      _ _ __   __ _ _   _  __ _ _   _ _ __ __ _| |_ ___
#     | | '_ \ / _` | | | |/ _` | | | | '__/ _` | __/ _ \
#     | | | | | (_| | |_| | (_| | |_| | | | (_| | ||  __/
#     |_|_| |_|\__,_|\__,_|\__, |\__,_|_|  \__,_|\__\___|
#                           __/ |
#                          |___/
#
#
#
#                     Copyright 2017 by Markus Binsteiner
#                                    licensed under GPLv3
#
#
# -------------------------------------------------------
#
# for more information please visit:
#
#                    https://github.com/makkus/inaugurate
#
#
#                                            version: 2.2
#
#
# settings to control inaugurates behaviour (default is false or 'not set' for all those)
# ---------------------------------------------------------------------------------------
#
# flags
# ^^^^^
#
# NO_ADD_PATH=false       # if set to true, ~/.local/bin won't be added to .profile
# NO_EXEC=false           # if set to true, the 'inaugurated' application won't be run
# FORCE_CONDA=false       # if set to true, conda will be used even when run as 'root' or using 'sudo'
# FORCE_SUDO=false        # if set to true, inaugurate will not run if started without sudo
# FORCE_NON_SUDO=false    # if set to true, inaugurate will not run if started with sudo
#                         # supplies (e.g. PREFIX_COMMAND=("frecklecute", "--community")
# SELF_DESTRUCT=false     # if set to true, after the 'inaugurated' application is run, the folder(s)
#                         # used in the installation process are deleted again. the system packages
#                         # used in that process (if using elevated permissions) as well as everything
#                         # installed in the run will still be present
#
# install config
# ^^^^^^^^^^^^^^
#
# INSTALL_BASE_DIR=""     # if set, inaugurate will install into the specified directory
#
# PIP_INDEX_URL=""        # an alternative $PIP_INDEX_URL
# PIP_TRUSTED_HOSTS=""    # pip trusted hosts
#
# CONDA_CHANNEL=""        # if $CONDA_CHANNEL is set, a $HOME/.condarc file is created and the
#                         # provided channel is set (only if the file doesn't exist yet)
#
# CHINA=false             # this is a convenience setting, if $CHINA is set to true, inaugurate sets
#                         # both pip and conda to point to mirrors within China, and it tries to also
#                         # change to Debian mirrors in China (if applicable -- run with elevated
#                         # permissions and on a Debian platform)
#
# misc
# ^^^^
#
# INSTALL_COMMAND_LINE_TOOLS=false   # legacy option for Mac OS X, installs Mac OS X CommandLineTools
#                                      package which was necessary for inaugurate with 'sudo' before
# CHECK_HOST_TIME=false              # whether to check host time against nist timeserver, this is mostly for debug purposes


# ============
# script start
# ============

# Exit codes:
# 2: application configuration error
# 3: execution error somewhere in the bootstrap pipeline
# 4: no matching profile/application found for provided executable or no executable provided (and NO_EXEC not set to 'true')
# 6: platform or package manager not supported
# 7: script run with wrong permissions


# ===============
# custom defaults
# ===============

# Set your custom application,  hardcoded environment variables and/or defaults here.
#
# For more information, check out:
#
# https://github.com/makkus/inaugurate#your-own-custom-inaugurate-script
#
# NOTE:
#   Only set variables here, don't execute anything as that might cause a problem if
#   the script download is interrupted.

# Example hardcoded default flag
#
# NO_EXEC=true

# Example default flag
#
# if [ -z "$NO_EXEC" ]; then
#    NO_EXEC=true
# fi

# Example default profile
#
# DEFAULT_PROFILE="freckles"
# # conda
# DEFAULT_PROFILE_CONDA_PYTHON_VERSION="2.7"
# DEFAULT_PROFILE_CONDA_DEPENDENCIES="pip cryptography pycrypto git virtualenv"
# DEFAULT_PROFILE_EXECUTABLES_TO_LINK="freckles frecklecute freckelize freckfreckfreck frankentree inaugurate frocker"
# DEFAULT_PROFILE_EXTRA_EXECUTABLES="nsbl nsbl-tasks nsbl-playbook ansible ansible-playbook ansible-galaxy git"
# # deb
# DEFAULT_PROFILE_DEB_DEPENDENCIES="curl build-essential git python-dev python-pip python-virtualenv virtualenv libssl-dev libffi-dev"
# # rpm
# DEFAULT_PROFILE_RPM_DEPENDENCIES="wget git python-pip python-virtualenv openssl-devel gcc libffi-devel python-devel"
# # pip requirements
# DEFAULT_PROFILE_PIP_DEPENDENCIES="freckles"
# DEFAULT_PROFILE_ENV_NAME="freckles"
#
# and, a special var:
# PREFIX_COMMAND=("frecklecute" "--community")   # this can be used to pre-pend a pre-defined command to the arguments the user supplies

# clear PREFIX_COMMAND in case it is set
PREFIX_COMMAND=()

# custom function, can be overwritten by template
function template_init
{
    true
}


# a template marker to optionally add some hardcoded variables, so this script can be used with templating systems
#
#{{:: default_profile ::}}#

# =========
# functions
# =========

function init_vars
{
    INAUGURATE_VERSION=1

    if [ ! -z "$INAUGURATE_DEBUG" ]; then
        DEBUG=true
    fi
    if [ "$DEBUG" = true ]; then
        set -x
    fi

    # prepare some settings
    if [ "$CHINA" = true ]; then
      PIP_INDEX_URL="https://pypi.tuna.tsinghua.edu.cn/simple"
      CONDA_CHANNEL="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/"
    fi

    trap 'error_exit "Bootstrapping interrupted, exiting...; exit"' SIGHUP SIGINT SIGTERM

    # determine whether we run with sudo, or not
    if [ "$EUID" != 0 ]; then
        root_permissions=false
        INAUGURATE_USER="$USER"
    else
        root_permissions=true
        if [ -z "$SUDO_USER" ]; then
            if [ ! -z "$USER" ]; then
                INAUGURATE_USER="$USER"
            else
                INAUGURATE_USER="root"
            fi
        else
            INAUGURATE_USER="$SUDO_USER"
        fi
    fi

    INAUGURATE_USER_GROUP=$(id -ng ${INAUGURATE_USER})

    if [ "$root_permissions" = true ]; then
        if [ "$FORCE_CONDA" = true ] && [ -z "$SUDO_USER" ]; then
            install_method="conda"
        else
            if [ "$FORCE_CONDA" ]; then
                echo "- '$FORCE_CONDA does not have an effect when used with 'sudo', ignoring..."
            fi
            install_method="sudo"
        fi
    else
        install_method="conda"
    fi

    if [[ "$FORCE_SUDO" = true && "$install_method" == "conda" && "$INAUGURATE_USER" != "root" ]]; then
        (>&2 echo "This bootstrap script needs to be run with elevated permissions. Exiting...")
        exit 7
    fi

    if [[ "$FORCE_NON_SUDO" = true && "$install_method" == "sudo" ]]; then
        (>&2 echo "This bootstrap script needs to be run without sudo. Exiting...")
        exit 7
    fi

    # General variables
    PROGNAME="inaugurate"

    INAUGURATE_USER_HOME="`eval echo ~$INAUGURATE_USER`"
    INAUGURATE_BASE_DIR="$INAUGURATE_USER_HOME/.inaugurate"
    if [ -z "$INSTALL_BASE_DIR" ]; then
        BASE_DIR="$INAUGURATE_USER_HOME/.local/share"
        CHOWN_BASE_DIR="$INAUGURATE_USER_HOME/.local"  # this directory will be chown'ed to the $INAUGURATE_USER in case of sudo, set to $BASE_DIR if applicable
    else
        BASE_DIR="$INSTALL_BASE_DIR"
        CHOWN_BASE_DIR="$INSTALL_BASE_DIR"
    fi

    INAUGURATE_OPT="$BASE_DIR/inaugurate"
    INSTALL_LOG_DIR="$INAUGURATE_OPT/logs/"

    TEMP_DIR="$INAUGURATE_OPT/tmp/"

    SCRIPT_LOG_FILE="$INSTALL_LOG_DIR/install_$(date +"%Y%m%d%H%M%S").log"
    mkdir -p "$INSTALL_LOG_DIR"
    touch "$SCRIPT_LOG_FILE"
    chmod 700 "$SCRIPT_LOG_FILE"
    chown "$INAUGURATE_USER:$INAUGURATE_GROUP" "$INSTALL_LOG_DIR"

    rm -f "$INSTALL_LOG_DIR/current.log"
    ln -s "$SCRIPT_LOG_FILE" "$INSTALL_LOG_DIR/current.log"

    LOCAL_BIN_PATH="$INAUGURATE_USER_HOME/.local/bin"
    INAUGURATE_BIN_PATH="$INAUGURATE_OPT/bin"

    if [ ! -z "$1" ]; then
        PROFILE_NAME=`basename "$1"`
    else
        PROFILE_NAME="__INAUGURATE_PROFILE_NOT_SET__"
    fi

    log "INAUGURATE_USER: $INAUGURATE_USER"
    log "root_permissions: $root_permissions"
    log "install_method: $install_method"

    # inaugurate vars
    # conda
    INAUGURATE_CONDA_PYTHON_VERSION="2.7"
    INAUGURATE_CONDA_DEPENDENCIES="pip cryptography pycrypto git"
    INAUGURATE_CONDA_EXECUTABLES_TO_LINK="$PROFILE_NAME"
    # deb
    INAUGURATE_DEB_DEPENDENCIES="build-essential git python-dev python-virtualenv virtualenv libssl-dev libffi-dev"
    # rpm
    INAUGURATE_RPM_DEPENDENCIES="wget git python-virtualenv openssl-devel gcc libffi-devel python-devel openssl-devel"
    # pip requirements
    INAUGURATE_PIP_DEPENDENCIES="inaugurate"
    GET_PIP_URL="https://bootstrap.pypa.io/get-pip.py"

    # conda related variables
    CONDA_DOWNLOAD_URL_LINUX="https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh"
    CONDA_DOWNLOAD_URL_MAC="https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh"
    CONDA_BASE_DIR="$BASE_DIR/inaugurate/conda"
    INAUGURATE_CONDA_PATH="$CONDA_BASE_DIR/bin"
    CONDA_ROOT_EXE="$CONDA_BASE_DIR/bin/conda"
}

function error_exit
{

    #	----------------------------------------------------------------
    #	Function for exit due to fatal program error
    #		Accepts 1 argument:
    #			string containing descriptive error message
    #	----------------------------------------------------------------


	  error_output "${PROGNAME}: ${1:-"Unknown Error"}, check log file for details -> $SCRIPT_LOG_FILE" 1>&2
	  exit 1
}

# functions to read (remote) config
function log () {
    echo "    .. $@" >> "$SCRIPT_LOG_FILE"
}

function output() {
    log "$@"
    if ! [ "${QUIET}" = true ]; then
        echo "$@"
    fi
}

function error_output() {
    log $1
    (>&2 echo "$@")
}

function command_exists {
    PATH="$PATH:$LOCAL_BIN_PATH:$INAUGURATE_BIN_PATH" type "$1" > /dev/null 2>&1 ;
}

function command_exists_only_user_visible {
    PATH="$PATH:$LOCAL_BIN_PATH" type "$1" > /dev/null 2>&1 ;
}

function execute_log {
    local error="${@: -1}"
    "${@:1:$#-1}" >> "$SCRIPT_LOG_FILE" 2>&1 || error_exit "$error"
}

function check_host_time {

    output "  * checking local time against time.nist.gov"

    NIST_TIME="$(cat </dev/tcp/time.nist.gov/13)"
    if [[ $NIST_TIME = *denied* ]]; then
        echo "    => timeserver denied request, ignoring check..."
        return
    fi

    REMOTE_TIME=$(TZ=":UTC" date --date="$(echo "$NIST_TIME" | cut -d' ' -f2-3)" +%s)

    LOCAL_TIME=$(date +%s)

    let DIFF=${LOCAL_TIME}-${REMOTE_TIME}
    if [ "$DIFF" -lt 0 ]; then
        DIFF=${DIFF#-}
    fi

    if [ "$DIFF" -gt 60 ]; then
       echo "     => time difference greater than 1 minute ($DIFF seconds)"
       echo "        you might want to adjust your local time to prevent certificate errors"
    fi
}

function download {
    {
        if command_exists wget; then
            execute_log wget -O "$2" "$1" "Could not download $1 using wget"
        elif command_exists curl; then
            execute_log curl -o "$2" "$1" "Could not download $1 using curl"
        else
            error_output "Could not find 'wget' nor 'curl' to download files. Exiting..."
            exit 1
        fi
    } >> "$SCRIPT_LOG_FILE"
}

function read_remote() {

    if command_exists wget; then
        wget -qO- "$1"
    elif command_exists curl; then
        curl -fs "$1"
    else
        error_output "Could not find 'wget' nor 'curl' to download files. Exiting..."
        exit 1
    fi

}

function config_read() {
    (echo "$1" | grep -E "^${2}=" -m 1 2>/dev/null || echo "VAR=__UNDEFINED__") | head -n 1 | cut -d '=' -f 2-;
}

function config_get() {


    INAUGURATE_LOCAL_STORE="$INAUGURATE_BASE_DIR/local-store"

    local_app="$INAUGURATE_LOCAL_STORE/$1"

    if [ -f "$1" ]; then
        app_name=$(basename "$1")
        CONFIG=$(cat "$1")

        log "try local file config: ${1}"
        if [ ! -z "$CONFIG" ]; then
            log "local config found."
            log "$CONFIG"
            output "  * found local configuration: ${1}"
        fi
    elif [ -f "$local_app" ]; then
      CONFIG=$(cat $local_app)

      log "try local app store file config: ${local_app}"
      if [ ! -z "$CONFIG" ]; then
          log "local app store config found."
          log "$CONFIG"
          output "  * found local configuration: ${local_app}"
      fi
    else
      url="https://raw.githubusercontent.com/inaugurate/store/master/$1"
      output "  * checking inaugurate app store for: $1"
      CONFIG="$(read_remote $url)"

      log "try remote app store file config: ${url}"
      if [ ! -z "$CONFIG" ]; then
          log "remote app store config found."
          log "$CONFIG"
          output "  * found remote configuration: ${url}"
      fi
    fi

    if [ -z "$CONFIG" ]; then
        echo ""
        error_output "No configuration found for executable/profile: ${1}"
        echo ""
        exit
    fi


    #TODO: user confirmation after display?

    CONDA_PYTHON_VERSION="$(config_read "${CONFIG}" "CONDA_PYTHON_VERSION")";
    CONDA_DEPENDENCIES="$(config_read "${CONFIG}" "CONDA_DEPENDENCIES")";
    EXECUTABLES_TO_LINK="$(config_read "${CONFIG}" "EXECUTABLES_TO_LINK")";
    EXTRA_EXECUTABLES="$(config_read "${CONFIG}" "EXTRA_EXECUTABLES")";
    DEB_DEPENDENCIES="$(config_read "${CONFIG}" "DEB_DEPENDENCIES")";
    RPM_DEPENDENCIES="$(config_read "${CONFIG}" "RPM_DEPENDENCIES")";
    PIP_DEPENDENCIES="$(config_read "${CONFIG}" "PIP_DEPENDENCIES")";
    ENV_NAME="$(config_read "${CONFIG}" "ENV_NAME")";
    if [ "${ENV_NAME}" = "__UNDEFINED__" ]; then
        ENV_NAME="$EXECUTABLE_NAME"
    fi
}




function install_inaugurate {
    if [ "$1" = "sudo" ]; then
        install_inaugurate_root
    else
        install_inaugurate_non_root_conda
    fi
}

#TODO: exception handline for this
function create_virtualenv {
    {
    su "$INAUGURATE_USER" <<EOF
set +e
mkdir -p "$INAUGURATE_OPT"
if [ ! -e "$VIRTUALENV_DIR" ]; then
  virtualenv --system-site-packages "$VIRTUALENV_DIR"
fi
source "$VIRTUALENV_DIR/bin/activate"
pip install --upgrade pip
pip install --upgrade setuptools wheel
pip install --upgrade requests
#set -e
EOF
    } >> "$SCRIPT_LOG_FILE" 2>&1 || error_exit "Could not create '$VENV_NAME' virtual environment, check log file for details: $SCRIPT_LOG_FILE"
}

#TODO: exception handling for this
#TODO: check whether package already installed? or overkill? -- yeah, probably
function install_package_in_virtualenv {
    output "    -> installing '$1' into venv: $VIRTUALENV_DIR"
    {
        su "$INAUGURATE_USER" <<EOF
set +e
source "$VIRTUALENV_DIR/bin/activate"
pip install --upgrade "$1" --upgrade-strategy only-if-needed
#set -e
EOF
    } >> "$SCRIPT_LOG_FILE" 2>&1 || error_exit "Could not create '$VENV_NAME' virtual environment, check log file for details: $SCRIPT_LOG_FILE"
}

function apt_update {
    # sometimes, on a new debian machine, the first (and even 2nd) 'apt-get update' fails...
    # so call is wrapped in a function
    apt-get update || apt-get update
}

function install_inaugurate_deb {
    output "  * Debian-based system detected"
    output "  * updating apt cache"
    # sometimes, on a new debian machine, the first (and even 2nd) 'apt-get update' fails...
    execute_log apt_update "Could not update apt repository cache"
    output "  * installing dependencies: $DEB_DEPENDENCIES"
    execute_log apt-get install -y $DEB_DEPENDENCIES "Error installing dependencies via apt."
    output "  * creating '$VENV_NAME' virtual environment"
    create_virtualenv
    for pkgName in $PIP_DEPENDENCIES
    do
        install_package_in_virtualenv $pkgName
    done
    link_required_executables "$VIRTUALENV_PATH" "$EXECUTABLES_TO_LINK"
    link_extra_executables "$VIRTUALENV_PATH" "$EXTRA_EXECUTABLES"
    #export PATH="$PATH:$VIRTUALENV_PATH"
}

function install_inaugurate_rpm {
    output "  * RedHat-based system detected."
    output "  * installing dependencies: $RPM_DEPENDENCIES"
    #execute_log yum install -y epel-release "Error installing epel-release via yum."
    execute_log yum install -y $RPM_DEPENDENCIES "Error installing dependencies via yum."
    output "  * creating '$VENV_NAME' virtual environment"
    create_virtualenv
    for pkgName in $PIP_DEPENDENCIES
    do
        install_package_in_virtualenv $pkgName
    done
    link_required_executables "$VIRTUALENV_PATH" "$EXECUTABLES_TO_LINK"
    link_extra_executables "$VIRTUALENV_PATH" "$EXTRA_EXECUTABLES"
    #export PATH="$PATH:$VIRTUALENV_PATH"
}

function install_inaugurate_dnf {
    output "  * RedHat-based system with 'dnf' detected."
    output "  * installing dependencies: yum python-dnf $RPM_DEPENDENCIES"
    execute_log dnf install -y yum python-dnf $RPM_DEPENDENCIES "Error installing dependencies via yum."
    output "  * creating '$VENV_NAME' virtual environment"
    create_virtualenv
    for pkgName in $PIP_DEPENDENCIES
    do
        install_package_in_virtualenv $pkgName
    done
    link_required_executables "$VIRTUALENV_PATH" "$EXECUTABLES_TO_LINK"
    link_extra_executables "$VIRTUALENV_PATH" "$EXTRA_EXECUTABLES"
    #export PATH="$PATH:$VIRTUALENV_PATH"
}

function install_commandlinetools {
    g++ --version > /dev/null 2>&1
    if [ ! $? -eq 0 ]; then
        output "  * installing CommandLineTools"
        output "    -> looking up package name and version... "
        sudo -u "$INAUGURATE_USER" touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
        log "Finding command-line-tools name"
        PROD=$(softwareupdate -l |
               grep "\*.*Command Line" |
               head -n 1 | awk -F"*" '{print $2}' |
               sed -e 's/^ *//' |
               tr -d '\n')
        output "    -> installing: $PROD..."
        execute_log sudo -u "$INAUGURATE_USER" softwareupdate -i "$PROD" "Could not install $PROD"
        rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
    else
        output "  - 'xcode' already present, skipping"
    fi

}

function install_inaugurate_mac_root {
    output '  * MacOS X-based system detected.'
    if [ "$INSTALL_COMMAND_LINE_TOOLS" = true ]; then
        install_commandlinetools
    fi
    output "  * installing pip & virtualenv"
    if ! command_exists pip; then
        output "    * downloading get-pip.py script from: $GET_PIP_URL"
        download "$GET_PIP_URL" "$TEMP_DIR/get-pip.py"
        if [ ! -s "$TEMP_DIR/get-pip.py" ]; then
            error_output "Could not download get-pip.py script from '$GET_PIP_URL'. Exiting..."
        fi

        output "    * installing pip..."
        execute_log python "$TEMP_DIR/get-pip.py" "Could not install pip"

    fi
    if ! command_exists virtualenv; then
        execute_log pip install virtualenv "Could not install virtualenv via pip"
    fi

    output "  * creating '$VENV_NAME' virtual environment"
    create_virtualenv
    for pkgName in $PIP_DEPENDENCIES
    do
        install_package_in_virtualenv $pkgName
    done
    link_required_executables "$VIRTUALENV_PATH" "$EXECUTABLES_TO_LINK"
    link_extra_executables "$VIRTUALENV_PATH" "$EXTRA_EXECUTABLES"
    #export PATH="$PATH:$VIRTUALENV_PATH"
}

function install_inaugurate_linux_root {
    YUM_CMD=$(which yum 2> /dev/null)
    APT_GET_CMD=$(which apt-get 2> /dev/null)
    DNF_CMD=$(which dnf 2> /dev/null)
    if [[ ! -z $DNF_CMD ]]; then
        install_inaugurate_dnf
    elif [[ ! -z $YUM_CMD ]]; then
        install_inaugurate_rpm
    elif [[ ! -z $APT_GET_CMD ]]; then
        install_inaugurate_deb
    else
        error_output "Could not find supported package manager. Exiting..."
        exit 6
    fi
}

function install_inaugurate_root {

    output "  * elevated permissions detected, using sytem package manager to install dependencies"

    # figure out which os we are running
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        install_inaugurate_linux_root
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        install_inaugurate_mac_root
    elif [[ "$OSTYPE" == "cygwin" ]]; then
        # POSIX compatibility layer and Linux environment emulation for Windows
        error_output "Sorry, Cygwin platform is not supported (at the moment, anyway). Exiting..."
        exit 6
    elif [[ "$OSTYPE" == "msys" ]]; then
        # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
        error_output "Sorry, msys/MinGW platform is not supported (at the moment, anyway). Exiting..."
        exit 6
    elif [[ "$OSTYPE" == "win32" ]]; then
        error_output "Sorry, win32 platform is not supported (at the moment, anyway). Exiting..."
        exit 6
    elif [[ "$OSTYPE" == "freebsd"* ]]; then
        error_output "Sorry, freebsd platform is not supported (at the moment, anyway). Exiting..."
        exit 6
    else
        error_output "Could not figure out which platform I'm running on. Exiting..."
        exit 6
    fi
}

function calculate_relative_path {
    # from: https://unix.stackexchange.com/questions/85060/getting-relative-links-between-two-paths
    # both $1 and $2 are absolute paths beginning with /
    # $1 must be a canonical path; that is none of its directory
    # components may be ".", ".." or a symbolic link
    #
    # returns relative path to $2/$target from $1/$source

    source=$1
    target=$2

    common_part=$source
    result=""

    while [ "${target#"$common_part"}" = "$target" ]; do
        # no match, means that candidate common part is not correct
        # go up one level (reduce common part)
        common_part=$(dirname "$common_part")
        # and record that we went back, with correct / handling
        if [ -z "$result" ]; then
            result=".."
        else
            result="../$result"
        fi
    done

    if [ "$common_part" = / ]; then
        # special case for root (no common path)
        result="$result/"
    fi

    # since we now have identified the common part,
    # compute the non-common part
    forward_part="${target#"$common_part"}"

    # and now stick all parts together
    if [ -n "$result" ] && [ -n "$forward_part" ]; then
        result="$result$forward_part"
    elif [ -n "$forward_part" ]; then
        # extra slash removal
        result="${forward_part#?}"
    fi

    printf '%s\n' "$result"

}

function link_path {

    mkdir -p "$3"
    rm -f "$3/$2"

    link_folder="$3"
    target_folder="$1"

    relpath="$(calculate_relative_path "$link_folder" "$target_folder")"

    log "  * linking $link_folder/$2 to $relpath/$2"
    ln -s "$relpath/$2" "$link_folder/$2"

    # log "  * linking $1/$2 to $3/$2"
    # ln -s "$1/$2" "$3/$2"
}

function link_path_to_local_bin {
    link_path "$1" "$2" "$LOCAL_BIN_PATH"
}

function link_path_to_inaugurate_bin {
    link_path "$1" "$2" "$INAUGURATE_BIN_PATH"
}

function make_conda_env_links_relative {

    for exeName in conda activate deactivate
    do
        log "  * changing absolute to relative link for conda executable: $CONDA_INAUGURATE_ENV_PATH/bin/$exeName"
        rm -f "$CONDA_INAUGURATE_ENV_PATH/bin/$exeName"
        ln -s "../../../bin/$exeName" "$CONDA_INAUGURATE_ENV_PATH/bin/$exeName"
    done
}

function link_conda_executables {

    for pkgName in conda activate deactivate
    do
        link_path_to_local_bin "$INAUGURATE_CONDA_PATH" "$pkgName"
        link_path_to_inaugurate_bin "$INAUGURATE_CONDA_PATH" "$pkgName"
    done
    LINKED_CONDA_EXECUTABLES=true
}

function remove_conda_executables {

    for pkgName in conda activate deactivate
    do
        rm -f "$LOCAL_BIN_PATH/$pkgName"
    done
}

function link_required_executables {

    for pkgName in $2
    do
        link_path_to_local_bin "$1" "$pkgName"
        link_path_to_inaugurate_bin "$1" "$pkgName"
    done
}

function remove_local_bin_links {

    for pkg_name in $1
    do
        rm -f "$LOCAL_BIN_PATH/$pkg_name"
    done
}

function link_extra_executables {

    for pkgName in $2
    do
        link_path_to_inaugurate_bin "$1" "$pkgName"
    done
}

function install_inaugurate_non_root_conda {

    if [ "$INAUGURATE_USER" == "root" ]; then
        output "  * using conda package manager with 'root' account"
    else
        output "  * no elevated permissions detected, using conda package manager"
    fi

    #TODO: check for bzip2 package

    if [ ! -f "$CONDA_ROOT_EXE" ]; then
        install_conda_non_root
    else
        output "  - 'conda' already present, not installing again"
        #export PATH="$INAUGURATE_CONDA_PATH:$PATH"
    fi

    if [ ! -e "$CONDA_INAUGURATE_ENV_PATH/bin" ]; then
        output "  * creating '$CONDA_ENV_NAME' conda environment"
        execute_log "$CONDA_ROOT_EXE" create -y --name "$CONDA_ENV_NAME" "python=$CONDA_PYTHON_VERSION" "Could not create conda environment"
    else
        output "  - '$CONDA_ENV_NAME' conda environment already exists, not creating again"
    fi

    packages=`$CONDA_ROOT_EXE list --name "$CONDA_ENV_NAME"`

    # check python in conda environment
     if echo "$packages" | grep -q "^python\s*$CONDA_PYTHON_VERSION"; then
       output "    -> python already present in conda environment '$CONDA_ENV_NAME'"
     else
       output "    -> installing python (version $CONDA_PYTHON_VERSION) into conda environment '$CONDA_ENV_NAME'"
       execute_log "$CONDA_ROOT_EXE" install --name "$CONDA_ENV_NAME" -y "python=$CONDA_PYTHON_VERSION" "Could not install python in conda environment."
    fi

    # check conda dependencies
    for pkgName in $CONDA_DEPENDENCIES
    do
        if echo $packages | grep -q "$pkgName"; then
            output "    -> package '$pkgName' already present in conda environment '$CONDA_ENV_NAME'"
         else
            output "    -> installing $pkgName into conda environment '$CONDA_ENV_NAME'"
            execute_log "$CONDA_ROOT_EXE" install --name "$CONDA_ENV_NAME" -y "$pkgName" "Could not install $pkgName in conda environment."
         fi
    done

    execute_log source "$INAUGURATE_CONDA_PATH/activate" "$CONDA_ENV_NAME" "Could not activate '$CONDA_ENV_NAME' conda environment"

    for pkgName in $PIP_DEPENDENCIES
    do
        modules=`$INAUGURATE_CONDA_PATH/pydoc modules`
        if echo "$modules" | grep -q "$pkgName" ; then
           output "    -> python package '$pkgName' already present in conda environment '$CONDA_ENV_NAME'"
        else
            output "    -> installing python package '$pkgName' into conda environment '$CONDA_ENV_NAME'"
            execute_log pip install -U "$pkgName" --upgrade-strategy only-if-needed "Could not install $pkgName in conda environment"
        fi

    done
    execute_log source "$INAUGURATE_CONDA_PATH/deactivate" "$CONDA_ENV_NAME" "Could not deactivate '$CONDA_ENV_NAME' conda environment"
    link_conda_executables
    link_required_executables "$CONDA_INAUGURATE_ENV_PATH/bin" "$EXECUTABLES_TO_LINK"
    link_extra_executables "$CONDA_INAUGURATE_ENV_PATH/bin" "$EXTRA_EXECUTABLES"
    make_conda_env_links_relative
}

function install_conda_non_root {
    output "  * bootstrapping conda package manager"
    {
    cd "$TEMP_DIR"
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        download "$CONDA_DOWNLOAD_URL_LINUX" "$TEMP_DIR/miniconda.sh"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        download "$CONDA_DOWNLOAD_URL_MAC" "$TEMP_DIR/miniconda.sh"
    fi
    } >> "$SCRIPT_LOG_FILE" 2>&1
    mkdir -p "$INAUGURATE_OPT"
    mkdir -p "$INAUGURATE_BASE_DIR"

    chown -R "$INAUGURATE_USER:$INAUGURATE_USER_GROUP" "$INAUGURATE_BASE_DIR"

    output "  * installing conda"
    {
    bash "$TEMP_DIR/miniconda.sh" -b -p "$CONDA_BASE_DIR"
    #export PATH="$INAUGURATE_CONDA_PATH:$PATH"
    cd "$HOME"
    rm -rf "$TEMP_DIR"
    } >> "$SCRIPT_LOG_FILE" 2>&1
}

function add_inaugurate_path {
    if ! grep -q 'add inaugurate environment' "$INAUGURATE_USER_HOME/.profile"  > /dev/null 2>&1 ; then
       cat <<"EOF" >> "$INAUGURATE_USER_HOME/.profile"

# add inaugurate environment
LOCAL_BIN_PATH="$HOME/.local/bin"
if [ -d "$LOCAL_BIN_PATH" ]; then
    PATH="$PATH:$LOCAL_BIN_PATH"
fi
EOF

       output "Added path to inaugurate bin dir to .profile. You'll need to logout and login again to see the effect. Or you can just execute:"
       output ""
       output "   source ~/.profile"
    fi

    if [ -e "$INAUGURATE_USER_HOME/.bash_profile" ] && ! grep -q 'add inaugurate environment' "$INAUGURATE_USER_HOME/.bash_profile" ; then
        cat <<"EOF" >> "$INAUGURATE_USER_HOME/.bash_profile"

# add inaugurate environment
LOCAL_BIN_PATH="$HOME/.local/bin"
if [ -d "$LOCAL_BIN_PATH" ]; then
    PATH="$PATH:$LOCAL_BIN_PATH"
fi
EOF

        output ""
        output "Added path to inaugurate bin dir to .bash_profile. You'll need to logout and login again to see the effect. Or you can just execute:"
        output ""
        output "   source ~/.bash_profile"
    fi

    if [ -e "$INAUGURATE_USER_HOME/.zprofile" ] && ! grep -q 'add inaugurate environment' "$INAUGURATE_USER_HOME/.zprofile" ; then
        cat <<"EOF" >> "$INAUGURATE_USER_HOME/.zprofile"

# add inaugurate environment
LOCAL_BIN_PATH="$HOME/.local/bin"
if [ -d "$LOCAL_BIN_PATH" ]; then
    PATH="$PATH:$LOCAL_BIN_PATH"
fi
EOF

        output ""
        output "Added path to inaugurate bin dir to .zprofile. You'll need to logout and login again to see the effect. Or you can just execute:"
        output ""
        output "   source ~/.zprofile"
    fi
}

############# Start script ##################

function main
{
    init_vars ${@}
    if [ "$CHECK_HOST_TIME" = true ]; then
        check_host_time
    fi

    # to be used with templated inaugurate, can be overwritten there
    template_init

    export PATH="$LOCAL_BIN_PATH:$INAUGURATE_BIN_PATH:$PATH"
    #export PATH="$LOCAL_BIN_PATH:$PATH"

    execute_log echo "Starting inaugurate bootstrap: $(date)" "Error"

    # prepare pip, conda and apt mirrors if necessary
    if [ "$CHINA" = true ]; then
        CONDA_DOWNLOAD_URL_LINUX="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda2-latest-Linux-x86_64.sh"
        CONDA_DOWNLOAD_URL_MAC="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda2-latest-MacOSX-x86_64.sh"
    fi

    # if [ -n "$PIP_INDEX_URL" ] && [ ! -e "$INAUGURATE_USER_HOME/.pip/pip.conf" ]; then
    #     output ""
    #     output "* setting pip index to: $PIP_INDEX_URL"
    #     mkdir -p "$INAUGURATE_USER_HOME/.pip"
    #     echo "[global]" > "$INAUGURATE_USER_HOME/.pip/pip.conf"
    #     echo "index-url = $PIP_INDEX_URL" >> "$INAUGURATE_USER_HOME/.pip/pip.conf"
    # fi

    if [ -n "$CONDA_CHANNEL" ] && [ ! -e "$INAUGURATE_USER_HOME/.condarc" ]; then
        output ""
        output "* setting conda channel to: $CONDA_CHANNEL"
        echo "channels:" > "$INAUGURATE_USER_HOME/.condarc"
        echo "  - $CONDA_CHANNEL" >> "$INAUGURATE_USER_HOME/.condarc"
        echo "show_channel_urls: true" >> "$INAUGURATE_USER_HOME/.condarc"
    fi

    if [[ "$CHINA" = true && "$install_method" == "sudo" ]]; then
        # check if Debian
        APT_GET_CMD=$(which apt-get 2> /dev/null)
        if [[ ! -z $APT_GET_CMD ]]; then
           output ""
           output "setting apt sources to ftp.cn.debian.org mirror"
           if [ ! -e /etc/apt/sources.list.bak.inaugurate ]; then
                cp /etc/apt/sources.list /etc/apt/sources.list.bak.inaugurate
           fi
           sed -i 's/deb.debian.org/ftp.cn.debian.org/g' /etc/apt/sources.list
        fi
    fi

    if [ "$PROFILE_NAME" == "__INAUGURATE_PROFILE_NOT_SET__" ]; then
        if [ "$NO_EXEC" = true ]; then
            if [ -z "$DEFAULT_PROFILE" ]; then
                error_output "No executable provided and no default profile set in this script. Exiting..."
                exit 4
            else
                log "No executable provided and NO_EXEC set to truth. Using 'DEFAULT_PROFILE'."
                PROFILE_NAME="$DEFAULT_PROFILE"
            fi
        else
            error_output "No executable provided, and 'NO_EXEC' environment variable not set to 'true'. Exiting..."
            exit 4
        fi

    fi

    # check if command is already in the path, if it is, assume everything is bootstrapped
    EXECUTABLE_NAME="$PROFILE_NAME"

    if ! command_exists_only_user_visible $EXECUTABLE_NAME; then


        output ""
        output "'$EXECUTABLE_NAME' not found in path, inaugurating..."
        output ""

        # setting defaults
        if [ -z "$DEFAULT_PROFILE_CONDA_PYTHON_VERSION" ]; then
            DEFAULT_PROFILE_CONDA_PYTHON_VERSION="2.7"
        fi
        if [[ -z "$DEFAULT_PROFILE_ENV_NAME" && ! -z "$DEFAULT_PROFILE" ]]; then
            DEFAULT_PROFILE_ENV_NAME="$DEFAULT_PROFILE"
        fi

        if [[ ! -z $DEFAULT_PROFILE && $DEFAULT_PROFILE_EXECUTABLES_TO_LINK = *"$PROFILE_NAME"* ]]; then
            output "  * matching executable mapping in default inaugurate profile '$DEFAULT_PROFILE' found for executable: $PROFILE_NAME"
            # conda
            CONDA_PYTHON_VERSION="$DEFAULT_PROFILE_CONDA_PYTHON_VERSION"
            CONDA_DEPENDENCIES="$DEFAULT_PROFILE_CONDA_DEPENDENCIES"
            EXECUTABLES_TO_LINK="$DEFAULT_PROFILE_EXECUTABLES_TO_LINK"
            EXTRA_EXECUTABLES="$DEFAULT_PROFILE_EXTRA_EXECUTABLES"
            # deb
            DEB_DEPENDENCIES="$DEFAULT_PROFILE_DEB_DEPENDENCIES"
            # rpm
            RPM_DEPENDENCIES="$DEFAULT_PROFILE_RPM_DEPENDENCIES"
            # pip requirements
            PIP_DEPENDENCIES="$DEFAULT_PROFILE_PIP_DEPENDENCIES"
            ENV_NAME="$DEFAULT_PROFILE_ENV_NAME"
        else
            if [ -z "$DEFAULT_PROFILE" ]; then
                log "  - no default inaugurate profile defined"
                #output "  - no default inaugurate profile defined"
            else
                output "  - no matching executable mapping for '$PROFILE_NAME' found in inaugurate default profile '$DEFAULT_PROFILE'"
            fi

            config_get "$PROFILE_NAME"
        fi

        CONDA_ENV_NAME="$ENV_NAME"
        VENV_NAME="$ENV_NAME"
        CONDA_INAUGURATE_ENV_PATH="$CONDA_BASE_DIR/envs/$CONDA_ENV_NAME"
        CONDA_INAUGURATE_ENV_EXE="$CONDA_INAUGURATE_ENV_PATH/bin/conda"

        # python/virtualenv related variables
        VIRTUALENV_DIR="$INAUGURATE_OPT/virtualenvs/$VENV_NAME"
        VIRTUALENV_PATH="$VIRTUALENV_DIR/bin"

        mkdir -p "$TEMP_DIR"
        mkdir -p "$LOCAL_BIN_PATH"
        mkdir -p "$INAUGURATE_BIN_PATH"
        if [[ $install_method == "sudo" ]]; then
            chown -R "$INAUGURATE_USER:$INAUGURATE_USER_GROUP" "$BASE_DIR"
            chown -R "$INAUGURATE_USER:$INAUGURATE_USER_GROUP" "$TEMP_DIR"
            chown -R "$INAUGURATE_USER:$INAUGURATE_USER_GROUP" "$LOCAL_BIN_PATH"
            chown -R "$INAUGURATE_USER:$INAUGURATE_USER_GROUP" "$INAUGURATE_BIN_PATH"
            chown -R "$INAUGURATE_USER:$INAUGURATE_USER_GROUP" "$INAUGURATE_OPT"
        fi

        install_inaugurate "$install_method"
        output ""

        if [[ $install_method == "sudo" ]]; then
            chown -R "$INAUGURATE_USER:$INAUGURATE_USER_GROUP" "$CHOWN_BASE_DIR"
        fi

        if [[ ! "$SELF_DESTRUCT" = true && ! "$NO_ADD_PATH" = true ]]; then
            add_inaugurate_path
        fi

        shift
        output ""
        if [ "$NO_EXEC" = true ]; then
            output "Boostrapping finished, NO_EXEC flag set, so not executing '$EXECUTABLE_NAME', exiting instead..."
            exit 0
        else
            output "Bootstrapping finished, now attempting to run '$EXECUTABLE_NAME' (like so: '$EXECUTABLE_NAME $@')"
            output ""
            output "========================================================================"
            output ""
        fi
    else
        if [ "$NO_EXEC" = true ]; then
            output "NO_EXEC flag set, so not executing '$EXECUTABLE_NAME'. Exiting..."
            exit 0
        else
            shift
        fi
    fi

    execute_log echo "Finished '$PROFILE_NAME' bootstrap: $(date)" "Error"

    #echo "INAUGURATE_PATH: $LOCAL_BIN_PATH"

    if [[ "$install_method" == "sudo" ]]; then
        if [[ "$INAUGURATE_USER" == "root" ]]; then
            PATH="$PATH:$LOCAL_BIN_PATH:$INAUGURATE_BIN_PATH" "$EXECUTABLE_NAME" "$@"
        else
            exec sudo -u "$INAUGURATE_USER" "$LOCAL_BIN_PATH/$EXECUTABLE_NAME" "$@"
        fi
    else
        PATH="$PATH:$LOCAL_BIN_PATH:$INAUGURATE_BIN_PATH" "$EXECUTABLE_NAME" "$@"
    fi

    if [ "$SELF_DESTRUCT" = true ]; then
        output ""
        output "  !!!  SELF_DESTRUCT flag set, deleting inaugurate-created folders and created links...  !!!"
        remove_local_bin_links "$EXECUTABLES_TO_LINK"
        if [ "$LINKED_CONDA_EXECUTABLES" = true ]; then
            remove_conda_executables
        fi
        rm -rf "$INAUGURATE_OPT"
        output "  !!! deleted '$INAUGURATE_OPT', exiting now...  !!!"
        output ""
    fi

    exit 0
}

# ============================
# script execution entry point
# ============================

# adding PREFIX_COMMAND if necessary
if [ -z ${PREFIX_COMMAND} ]; then
    PREFIX_COMMAND=()
fi

for arg in "$@"; do
    PREFIX_COMMAND+=(${arg})
done

if [ "$BASH_SOURCE" == "$0" ]; then
    # run directly
    main ${PREFIX_COMMAND[@]}
elif [ "$BASH_SOURCE" == "" ]; then
    # piped in
    main ${PREFIX_COMMAND[@]}
fi

exit 0
