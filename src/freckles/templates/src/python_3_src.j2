# -*- coding: utf-8 -*-

{% if package_name is defined %}
#
# module path: {{ package_name }}.{{ module_name }}.{{ frecklet.class_name }}
#
{% endif %}

from dataclasses import dataclass
from pyckles import AutoPycklet, Pycklet
from collections import Sequence
from typing import *    # noqa

@dataclass
class {{ frecklet.class_name }}(AutoPycklet):
    """{{ frecklet.doc.get_help(use_short_help=True, default="No documentation available.") | indent(5) }}

       Args:
{% for an, a in frecklet.vars_frecklet.items() %}         {{ an }}: {{ a.doc.get_short_help(use_help=True, default="n/a") }}
{% endfor %}
    """

    FRECKLET_ID = "{{ frecklet.id }}"

{% for arg_name, arg in frecklet.vars.items() %}    {{ arg_name }}: {{ arg.type | get_dataclass_type }} = None
{% endfor %}

    def __post_init__(self):
        super({{ frecklet.class_name }}, self).__init__(var_names=[{{ frecklet.vars.keys() | map('quote') | join(', ') }}])

    def __add__(self, other):

        if issubclass(other.__class__, Pycklet):
            return [self, other]
        elif isinstance(other, Sequence):
            result = [self]
            for o in other:
              if issubclass(o.__class__, Pycklet):
                 result.append(o)
              else:
                  raise Exception("Can't add to Pycklet, wrong type: {}".format(type(o)))
            return result
        else:
            raise Exception("Can't add to Pycklet, wrong type: {}".format(type(o)))

frecklet_class = {{ frecklet.class_name }}
