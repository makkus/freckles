# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "fujimakishouten/debian-stretch64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # set private network, for deb proxy
  #config.vm.network "private_network", type: "dhcp"
  config.vm.network "public_network"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  #config.vm.network "forwarded_port", guest: 8180, host: 8180
  ##config.vm.network "forwarded_port", guest: 8000, host: 8000
  #config.vm.network "forwarded_port", guest: 8082, host: 8082
  #config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 8090, host: 8090
  #config.vm.network "forwarded_port", guest: 5050, host: 5050
  #config.vm.network "forwarded_port", guest: 5075, host: 5075
  #config.vm.network "forwarded_port", guest: 7878, host: 7878
  #config.vm.network "forwarded_port", guest: 8280, host: 8280
  ## Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder ".", "/vagrant", id: "vagrant"
  config.vm.synced_folder "../../", "/freckles", id: "freckles"
  config.vm.synced_folder "../../../frkl", "/frkl", id: "frkl"
  config.vm.synced_folder "../../../frutils", "/frutils", id: "frutils"
  config.vm.synced_folder "../../../luci", "/luci", id: "luci"
  config.vm.synced_folder "../../../../scripts/inaugurate", "/inaugurate", id: "inaugurate"
  config.vm.synced_folder "../../../lupkg", "/lupkg", id: "lupkg"
  config.vm.synced_folder "../../../nsbl", "/nsbl", id: "nsbl"
  config.vm.synced_folder "../../../../web/frkl", "/website", id: "website"
  #config.vm.synced_folder "../../../../repos", "/repos", id: "repos"
  #config.vm.synced_folder "../../../../sites", "/sites", id: "sites"


  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    # Customize the amount of memory on the VM:
    vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
#  config.vm.provision "shell", privileged: false, inline: <<-SHELL
#     sudo apt-get update
#     sudo apt-get install -y netcat net-tools
#     export DEB_PROXY_PORT=8000
#     echo "HEAD /" | nc $(sudo route -n | awk '/^0.0.0.0/ {print $2}') ${DEB_PROXY_PORT} | grep squid-deb-proxy && (echo "Acquire::http::Proxy \"http://$(sudo route -n | awk '/^0.0.0.0/ {print $2}'):${DEB_PROXY_PORT}\";" | sudo tee /etc/apt/apt.conf.d/30proxy) && (echo "Acquire::http::Proxy::ppa.launchpad.net DIRECT;" | sudo tee -a /etc/apt/apt.conf.d/30proxy) || echo "No squid-deb-proxy detected on VM host"
#  SHELL
  # config.vm.provision :shell, path: "vagrant_bootstrap.sh", privileged: false

end
